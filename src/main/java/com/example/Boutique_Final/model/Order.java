//package com.example.Boutique_Final.model;
//
//import lombok.AllArgsConstructor;
//import lombok.Data;
//import lombok.NoArgsConstructor;
//import com.example.Boutique_Final.model.Order;
//import org.springframework.data.annotation.Id;
//import org.springframework.data.mongodb.core.mapping.Document;
//import org.springframework.data.mongodb.core.mapping.DBRef;
//
//import java.time.LocalDateTime;
//import java.util.ArrayList;
//import java.util.List;
//
//@Document(collection = "orders")
//@Data
//@NoArgsConstructor
//@AllArgsConstructor
//public class Order {
//    public enum OrderStatus {
//        PREPARING, SHIPPED, DELIVERED, CANCELLED
//    }
//    @Id
//    private String id;
//
//    @DBRef
//    private User user;
//
//    private String address;
//    private String phoneNumber;
//
//    private OrderStatus status;
//
//    public String getId() {
//        return id;
//    }
//
//    public void setId(String id) {
//        this.id = id;
//    }
//
//    public User getUser() {
//        return user;
//    }
//
//    public void setUser(User user) {
//        this.user = user;
//    }
//
//    private LocalDateTime createdAt;
//
//    @DBRef
//    private List<OrderItem> items = new ArrayList<>();
//
//
//}
//


//package com.example.Boutique_Final.model;//package com.example.Boutique_Final.model;
////
////import lombok.AllArgsConstructor;
////import lombok.Data;
////import lombok.NoArgsConstructor;
////import com.example.Boutique_Final.model.Order;
////import org.springframework.data.annotation.Id;
////import org.springframework.data.mongodb.core.mapping.Document;
////import org.springframework.data.mongodb.core.mapping.DBRef;
////
////import java.time.LocalDateTime;
////import java.util.ArrayList;
////import java.util.List;
////
////@Document(collection = "orders")
////@Data
////@NoArgsConstructor
////@AllArgsConstructor
////public class Order {
////    public enum OrderStatus {
////        PREPARING, SHIPPED, DELIVERED, CANCELLED
////    }
////    @Id
////    private String id;
////
////    @DBRef
////    private User user;
////
////    private String address;
////    private String phoneNumber;
////
////    private OrderStatus status;
////
////    public double getTotalPrice() {
////        return totalPrice;
////    }
////
////    public void setTotalPrice(double totalPrice) {
////        this.totalPrice = totalPrice;
////    }
////
////    private double totalPrice;
////
////    public String getId() {
////        return id;
////    }
////
////    public void setId(String id) {
////        this.id = id;
////    }
////
////    public User getUser() {
////        return user;
////    }
////
////    public void setUser(User user) {
////        this.user = user;
////    }
////
////    private LocalDateTime createdAt;
////
////    @DBRef
////    private List<OrderItem> items = new ArrayList<>();
////
////
////
////
////
////
////}
////
//
////
////import lombok.Data;
////import org.springframework.data.annotation.Id;
////import org.springframework.data.mongodb.core.mapping.Document;
////import java.time.LocalDateTime;
////import java.util.List;
////
////@Document(collection = "orders")
////@Data
////public class Order {
////    @Id
////    private String id;
////    private User user;
////    private String address;
////    private String phoneNumber;
////    private OrderStatus status;
////    private LocalDateTime createdAt;
////    private double totalPrice;
////    private List<OrderItem> orderItems;  // ✅ Make sure this field exists
////
////    // ✅ Getter and Setter
////    public List<OrderItem> getOrderItems() {
////        return orderItems;
////    }
////
////    public void setOrderItems(List<OrderItem> orderItems) {
////        this.orderItems = orderItems;
////    }
////
////    public double getTotalPrice() {
////        return totalPrice;
////    }
////
////    public void setTotalPrice(double totalPrice) {
////        this.totalPrice = totalPrice;
////    }
////
////    public enum OrderStatus {
////        PREPARING, SHIPPED, DELIVERED, CANCELLED
////    }
////}
//
//import lombok.Data;
//import org.springframework.data.annotation.Id;
//import org.springframework.data.mongodb.core.mapping.Document;
//import java.time.LocalDateTime;
//import java.util.List;
//import java.util.UUID;
//
//@Document(collection = "orders")
//@Data
//public class Order {
//    @Id
//    private String id; // Auto-generated by MongoDB, fallback via UUID if needed.
//    private User user;
//    private String address;
//    private String phoneNumber;
//    private OrderStatus status;
//    private LocalDateTime createdAt;
//    private double totalPrice;
//    private List<OrderItem> orderItems;
//
//    // Default constructor to generate fallback ID
//    public Order() {
//        this.id = UUID.randomUUID().toString(); // Generate unique ID if MongoDB doesn't.
//    }
//
//    @Override
//    public String toString() {
//        return "Order{" +
//                "id='" + id + '\'' +
//                ", user=" + (user != null ? user.getId() : "null") +
//                ", address='" + address + '\'' +
//                ", phoneNumber='" + phoneNumber + '\'' +
//                ", status=" + status +
//                ", createdAt=" + createdAt +
//                ", totalPrice=" + totalPrice +
//                ", orderItemsSize=" + (orderItems != null ? orderItems.size() : "null") +
//                '}';
//    }
//
//    public enum OrderStatus {
//        PREPARING, SHIPPED, DELIVERED, CANCELLED
//    }
//}


package com.example.Boutique_Final.model;

import lombok.Data;
import org.springframework.data.annotation.Id;
import org.springframework.data.mongodb.core.mapping.Document;

import java.time.LocalDateTime;
import java.util.ArrayList;
import java.util.List;

@Document(collection = "orders")
@Data
public class Order {
    @Id
    private String id;
    private User user;
    private String address;
    private String phoneNumber;
    private OrderStatus status;
    private LocalDateTime createdAt;
    private double totalPrice;
    private List<OrderItem> orderItems;

    public enum OrderStatus {
        PREPARING, SHIPPED, DELIVERED, CANCELLED
    }

    public List<OrderItem> getOrderItems() {
        return orderItems != null ? orderItems : new ArrayList<>(); // Return an empty list if null
    }
}
